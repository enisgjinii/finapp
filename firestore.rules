rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticatedUser() {
      return isSignedIn();
    }

    function isValidAmount(amount) {
      return amount is number &&
             amount >= -999999999.99 &&
             amount <= 999999999.99;
    }

    function isValidDate(date) {
      return date is string &&
             date.matches('\\d{1,2}/\\d{1,2}/\\d{4}');
    }

    function isValidString(str, maxLength) {
      return str is string &&
             str.size() > 0 &&
             str.size() <= maxLength;
    }

    function isValidStringOrEmpty(str, maxLength) {
      return str == null || 
             (str is string && str.size() <= maxLength);
    }

    function isValidFinancialRecord(data) {
      return data.userId is string &&
             data.sheetName is string &&
             isValidDate(data.data) &&
             isValidStringOrEmpty(data.pershkrimi, 500) &&
             isValidAmount(data.shuma) &&
             data.uploadedAt is timestamp &&
             (data.category == null || isValidStringOrEmpty(data.category, 100)) &&
             (data.id == null || data.id is string);
    }

    function isValidUploadSession(data) {
      return data.userId is string &&
             isValidString(data.fileName, 255) &&
             data.uploadedAt is timestamp &&
             data.totalSheets is number && data.totalSheets >= 0 &&
             data.totalRecords is number && data.totalRecords >= 0 &&
             data.status in ['processing', 'completed', 'failed'] &&
             (data.error == null || isValidString(data.error, 500));
    }

    function hasRequiredFields(data, requiredFields) {
      return data.keys().hasAll(requiredFields);
    }


    // ============================================================================
    // FINANCIAL RECORDS COLLECTION
    // ============================================================================

    match /financialRecords/{recordId} {
      // TEMPORARILY PERMISSIVE FOR TESTING - Users can only access their own financial records
      allow read: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticatedUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;

      // TEMPORARY: Allow all operations for testing (remove after testing)
      allow read, write: if true;
    }

    // ============================================================================
    // UPLOAD SESSIONS COLLECTION
    // ============================================================================

    match /uploadSessions/{sessionId} {
      // TEMPORARILY PERMISSIVE - Users can only access their own upload sessions
      allow read: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticatedUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
    }

    // ============================================================================
    // ACCOUNTS COLLECTION
    // ============================================================================

    match /accounts/{accountId} {
      // Users can only access their own accounts
      allow read: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticatedUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
    }

    // ============================================================================
    // INSTALLMENTS COLLECTION
    // ============================================================================

    match /installments/{installmentId} {
      // Users can only access their own installments
      allow read: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticatedUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
    }

    // ============================================================================
    // SAVINGS COLLECTION
    // ============================================================================

    match /savings/{savingsId} {
      // Users can only access their own savings goals
      allow read: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticatedUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticatedUser() && resource.data.userId == request.auth.uid;
    }

    // ============================================================================
    // USER PROFILES COLLECTION
    // ============================================================================

    match /users/{userId} {
      // TEMPORARILY PERMISSIVE - Users can read and write their own profile
      allow read, write: if isAuthenticatedUser() && isOwner(userId);
    }

    // ============================================================================
    // SYSTEM DATA (READ-ONLY)
    // ============================================================================

    match /system/{document=**} {
      allow read: if isAuthenticatedUser();
      allow write: if false;
    }

    // ============================================================================
    // PUBLIC REFERENCE DATA
    // ============================================================================

    match /currencies/{currencyId} {
      allow read: if isAuthenticatedUser();
      allow write: if false;
    }

    match /categories/{categoryId} {
      allow read: if isAuthenticatedUser();
      allow write: if false;
    }

    // ============================================================================
    // DENY ALL OTHER ACCESS
    // ============================================================================

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
